    'use strict';
var controllers = angular.module('controllers', []);
controllers.controller('MainController',function () {});

/* ------------------------------------------
 ' FormController - контроллер формы
 ' ------------------------------------------
 ' Функции отправки \ обновления объявления,
 ' заполнение полей seller_name и email
 ' при клике на автора из списка.
 ' ------------------------------------------
 */
controllers.controller('FormController', ['$scope', 'dataFactory', 'formFactory', 'messageFactory', function ($scope, dataFactory, formFactory, messageFactory) 
      {

            var store = this;


            /* ---------------------------------------------------------------------------------
             * Вывод ошибок (errs и errStatus)
             * ---------------------------------------------------------------------------------
             * Вывод ошибок происходит глобально посредством 'dataFactoryInterceptor'. В нем в 
             * случае ошибки создаются '$rootScope' переменные 'errs' или 'errStatus', а у 
             * нас в темплейте идет вывод 'errs' ошибок непосредственно под полями формы.
             * созданные ниже переменные в данном коде НЕ используются, здесь же я их
             * добавил просто , чтобы было видно, что какой-то вывод ошибок есть.
             * ---------------------------------------------------------------------------------
             */
            var errs, errStatus;

            /* -------------------------------------------
             * store.sendButton
             * -------------------------------------------
             * Кнопка для предотвращения двойных нажатий.
             * Ставится в режим false при отсыле формы,
             * затем в .finally снова ставим true.
             * -------------------------------------------
             */

            store.sendButton = {active: true};


            /* ----------------------------------------------------------------------
             * $scope.adform
             * ----------------------------------------------------------------------
             * Эта переменная - ng-model полей формы. Заполняя ее-заполняем и форму.
             * Загружаем из сервиса formFactory значения формы. по дефолту стоят
             * private: 0 и price: 0. Значения можно менять прямиком в фактори
             * ----------------------------------------------------------------------
             */

            $scope.adform = formFactory.getForm();


            /* ------------------------------------------------------------------------------
             * $dataFactory.load
             * ------------------------------------------------------------------------------
             * Тут происходит загрузка данных. Сервис dataFactory отвечает за http запросы к 
             * api сервера. В данном случае он загружает объявления, категории, авторов, 
             * города, возвращает промис, а по его выполнению записывает данные в
             * свою переменную data, которая после этого отдается нашему 
             * формконтроллеру через 'dataFactory.getData()'.
             * ------------------------------------------------------------------------------
             */
            dataFactory.load().then(function () {
                  store.data = dataFactory.getData();
            });



            /* -----------------------------------------------------------------------------------
             * $scope.sendForm
             * -----------------------------------------------------------------------------------
             * При нажатии на кнопку Добавить\Обновить Кнопка  "отправить"  становится неактивной.
             * В переменную toSave записывается значение полей формы, затем toSave передается
             * в наш 'dataFactory, который отсылает ее на сервер. Там же в фактори обраба-
             * тываются статусы и в переменную сервиса 'data' , которая залинкована с
             * переменной контроллера  'store.data' вносятся изменения. выводятся
             * сообщения. Форме присваивается  значение нетронутости, а затем
             * запускается .finally и кнопка отправки становится активной
             * -----------------------------------------------------------------------------------
             */
            $scope.sendForm = function () {

                  store.sendButton.active = false;
                  var toSave = $scope.adform;

                  dataFactory.save(toSave).then(function (response) {
                        var resp = response.data;
                        messageFactory.setMsg('adMsg', resp.ad.message, 'alert-info', 700);
                        messageFactory.setMsg('auMsg', resp.author.message, 'alert-info', 300);

                        formFactory.resetForm();

                        $scope.adForm.$setPristine();
                  }).finally(function () {
                        store.sendButton.active = true;
                  });
            };

            /* -----------------------------------------------------------------------
             * $scope.auFill
             * -----------------------------------------------------------------------
             *  у нас есть выпадающий список авторов. При нажатии на его опции поля 
             *  имя и мыло в форме заполняются. Функция formFactory.auFill
             *  также используется при редактировании сообщения.
             * -----------------------------------------------------------------------
             */
            $scope.auFill = function (mail, name) {
                  formFactory.auFill(mail, name);
            };

      }]);

/* -----------------------------------------------------
 ' MessageController - контроллер сплывающих сообщений.
 ' -----------------------------------------------------
 */

controllers.controller('MessageController', ['$scope', 'messageFactory', function ($scope, messageFactory) {

            /* -----------------------------------------------------------------
             * Сообщения adMsg и auMsg
             * -----------------------------------------------------------------
             * Сервис messageFactory работает с всплывающими сбоку сообщениями.
             * -----------------------------------------------------------------
             */
            this.adMsg = messageFactory.getAdMsg();
            this.auMsg = messageFactory.getAuMsg();


            /* ------------------------------------------------------------
             * $scope.hideMsgs
             * ------------------------------------------------------------
             * У нас два закрываемых контейнера с сообщениями. эта функция 
             * срабатывает при нажатии на Х(закрыть) на одном из них.
             * ------------------------------------------------------------
             */
            $scope.hideMsgs = function (msgBoxToHide) {
                  messageFactory.hideMsgs(msgBoxToHide);
            };

            /* ---------------------------------------------------------------------------
             * Обработка ошибок
             * ---------------------------------------------------------------------------
             * При возникновении ошибок ( кроме 422 - валидации ) в ответе на ajax запрос
             * dataFactoryInterceptor создает переменную '$rootScope.errStatus' , в
             * которую передается номер ошибки. Создается всплывающее сообщение
             * справа снизу экрана об ошибке, с указанием ее номера.
             * ---------------------------------------------------------------------------
             */
            $scope.$on('response error', function () {
                  messageFactory.setMsg('adMsg', $scope.errStatus + '\'ая Ошибка', 'alert-danger');
            });


}]);




/* ----------------------------------------------------------------------
 ' TableController - контроллер таблицы с объявлениями.
 ' ----------------------------------------------------------------------
 ' Функции режима редактирования(возврат значений конкретного объявления
 ' и заполнения ими модели формы в formFactory), удаления объявления.
 ' ----------------------------------------------------------------------
 */
controllers.controller('TableController', ['$scope', 'dataFactory', 'formFactory', 'messageFactory', function ($scope, dataFactory, formFactory, messageFactory) {
            var store = this;
            /* ------------------------------------------------------------------------------
             * $dataFactory.load (второй раз запрос к серверу не делается)
             * ------------------------------------------------------------------------------
             * Тут происходит загрузка данных как и в FormController, с одной лишь разницей
             * в том, что если уже пошел запрос на сервер, то вместо второго запроса нам 
             * вернется ссылка на предыдущий promise. Сервис dataFactory отвечает за 
             * http запросы к api сервера. В данном случае он  возвращает промис,
             * а по выполнению записывает данные в свою переменную store.data,
             * которая после этого отдается нам через dataFactory.getData().
             * ------------------------------------------------------------------------------
             */
            dataFactory.load().then(function () {
                  store.data = dataFactory.getData();
            });
            
            
             /* ------------------------------------------------------------------------------
             * $scope.edit
             * -------------------------------------------------------------------------------
             * при нажатии на кнопку Редактировать - отсылается на сервер id через наш сервис,
             * а пришедший нам ответ мы отправляем в formFactory на заполнение формы.
             * -------------------------------------------------------------------------------
             */
            $scope.edit = function (id) {
                  dataFactory.show(id).success(function (response) {
                        formFactory.fillForm(response);
                        messageFactory.setMsg('adMsg', 'Редактируем объявление №' + response.ad.id, 'alert-success', 300);
                  });
            };
            

            /* --------------------------------------------------------------------
             * $scope.delete
             * --------------------------------------------------------------------
             * при удалении - айди отправляется на сервер через наш сервис, затем 
             * резетается форма и появляется сообщение об удалении. затем
             * если объявлений нет, то выводится сообщение об этом.
             * --------------------------------------------------------------------
             */
            $scope.delete = function (index) {

                  dataFactory.delete(index).then(function (response) {
                        formFactory.resetForm();
                        messageFactory.setMsg('adMsg', response.data.message, 'alert-warning', 300);
                  }).then(function () {
                        if (angular.equals({}, store.data.ads)) {
                              messageFactory.setMsg('auMsg', 'Больше нет объявлений', 'alert-danger', 1000);
                        }
                  });
            };

}]);
